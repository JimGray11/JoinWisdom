#framework name
name = "rms-model-pred-daily"

#mail configurations
mail{
  api.url="http://42.62.78.140:8002/WarningEmail/"
  #multi receiver, such as ["a1@b.com","a2@b.com"]
  to=["xnzhang@jointwisdom.cn","yclai@jointwisdom.cn"]
  #to=["xnzhang@jointwisdom.cn"]
}

#assembly的存放目录的绝对路径
assemblies-dir = "/hadoop/1/bi_rms_v2/models/pred_v1.3_daily/assemblies/"
#所有assembly的配置信息
assemblies = [
  {
    name = "micro-pred-longterm"
    index = 1
    #options ["cleaner","model"]
    type = "model"
    jar-name = "rms-ab-micro-pred-longterm-assembly-1.3.jar"
    class-name = "cn.jw.rms.ab.pred.longterm.Predictor"
    enable = true
  },
  {
    name = "micro-pred-sum-longterm"
    index = 2
    #options ["cleaner","model"]
    type = "model"
    jar-name = "rms-ab-micro-pred-sum-assembly-1.3.jar"
    class-name = "cn.jw.rms.ab.pred.sum.Predictor"
    enable = true
  },
  {
    name = "micro-pred-shortterm"
    index = 3
    #options ["cleaner","model"]
    type = "model"
    jar-name = "rms-ab-micro-pred-shortterm-assembly-1.3.2.jar"
    class-name = "cn.jw.rms.ab.pred.shortterm.Predictor"
    enable = true
  },
  {
    name = "micro-pred-fix-shortterm"
    index = 4
    #options ["cleaner","model"]
    type = "model"
    jar-name = "rms-ab-micro-pred-fix-assembly-1.3.jar"
    class-name = "cn.jw.rms.ab.pred.fix.Predictor"
    enable = true
  },
  {
    name = "micro-pred-sum-shortterm"
    index = 5
    #options ["cleaner","model"]
    type = "model"
    jar-name = "rms-ab-micro-pred-sum-assembly-1.3.jar"
    class-name = "cn.jw.rms.ab.pred.sum.Predictor"
    enable = true
  },
  {
    name = "micro-pred-wsfweight"
    index = 6
    #options ["cleaner","model"]
    type = "model"
    jar-name = "rms-ab-micro-pred-wsfweight-assembly-1.3.jar"
    class-name = "cn.jw.rms.ab.micro.pred.wdfweight.Predictor"
    enable = true
  },
  {
    name = "micro-pred-combine"
    index = 7
    #options ["cleaner","model"]
    type = "model"
    jar-name = "rms-ab-micro-pred-combine-assembly-1.3.jar"
    class-name = "cn.jw.rms.ab.pred.combine.Predictor"
    enable = true
  },
  {
    name = "micro-pred-fix"
    index = 8
    #options ["cleaner","model"]
    type = "model"
    jar-name = "rms-ab-micro-pred-fix-assembly-1.3.jar"
    class-name = "cn.jw.rms.ab.pred.fix.Predictor"
    enable = true
  },
  {
    name = "micro-pred-sum"
    index = 9
    #options ["cleaner","model"]
    type = "model"
    jar-name = "rms-ab-micro-pred-sum-assembly-1.3.jar"
    class-name = "cn.jw.rms.ab.pred.sum.Predictor"
    enable = true
  }
]

#assembly的参数配置
parameters = [
  {
    #(必填)assembly的唯一名称, 标识该参数列表属于哪个assembly
    name = "micro-pred-longterm"
    #以下就为具体的参数
    #(必填)数据源所在目录
    hadoop-host= "hdfs://ns1"
    #(必填)数据源所在目录
    segbkdailysum-dir="hdfs://ns1/p/bw/bi/rms/seg_bk_daily_sum/"
    segpredconf-dir = "hdfs://ns1/p/bw/bi/rms/conf/history/predconf/"
    holidays-dir = "hdfs://ns1/p/bw/bi/rms/conf/history/specialday/"
    hotel-dir = "hdfs://ns1/p/bw/bi/rms/conf/history/htlcd/"
    season-dir = "hdfs://ns1/p/bw/bi/rms/conf/history/season/"
    #(必填)处理后数据保存目录
    dist-dir="hdfs://ns1/p/bw/bi/rms/middata/history/pred_lf_pu/dt=history"
    #(必填)清洗开始日期,指定日期时,实际使用(fc-date - 1)的日期
    #default is "now"
    fc-date = "2016-01-02,2016-01-31"
    #必须为365的倍数
    default-hist-days = 960
    common-htlcd = "BW00000001"
    #default is "all"
    fc-htlcd = "all"
    field-splitter = "#"
    #(必填)pairRDD重新分区的个数, 一般为cpu核数
    pairRDD-repartition-num = 0
    #(必填)普通RDD重新分区的个数, 视情况而定, 一般为cpu核数
    RDD-repartition-num = 6
    #(必填)是否将清洗后数据保存到上面的保存目录
    save-result-to-file = true
    using-prevStepRDD=false
    test-open = true
    #test-segbkdailysum-dir = "hdfs://ns1/p/bw/bi/pms/pms_stage0/seg_bk_daily_sum"
    test-segbkdailysum-dir = "hdfs://ns1/p/bw/bi/rms/seg_bk_daily_sum/dt=20160511"
    HA-start = "2014-01-01"
    HA-end = "2015-12-31"
    #options ["weekday","weekendOrNot","noWeekday"]
    season-weekday-tag-type = "weekday"
    #1:Mon, 2:Tue, 3:Wed, 4:Thu, 5:Fri, 6:Sat, 7:Sun
    weekend-days = [5,6,7]
    checkpoint-num = 200
    checkpoint-dir = "hdfs://ns1/p/bw/bi/rms/spark_checkpoint"
    fc-days = 31
    matrix-columns = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,22,29,36,43,57,71,85,119,147,175,203,231,259,287,315,343,365]
    #true or false
    fault-tolerance = true
  },
  {
    #(必填)assembly的唯一名称, 标识该参数列表属于哪个assembly
    name = "micro-pred-shortterm"
    #以下就为具体的参数
    #(必填)数据源所在目录
    hadoop-host= "hdfs://ns1"
    segbkdailysum-dir="hdfs://ns1/p/bw/bi/rms/seg_bk_daily_sum/"
    segpredconf-dir = "hdfs://ns1/p/bw/bi/rms/conf/history/predconf/"
    holidays-dir = "hdfs://ns1/p/bw/bi/rms/conf/history/specialday/"
    hotel-dir = "hdfs://ns1/p/bw/bi/rms/conf/history/htlcd"
    season-dir = "hdfs://ns1/p/bw/bi/rms/conf/history/season/"
    #(必填)处理后数据保存目录
    dist-dir="hdfs://ns1/p/bw/bi/rms/middata/history/pred_sf_pu/dt=history"
    #(必填)清洗开始日期,指定日期时,实际使用(fc-date - 1)的日期
    #default is "now"
    fc-date = "2016-01-02,2016-01-31"
    common-htlcd = "BW00000001"
    #default is "all"
    fc-htlcd = "all"
    field-splitter = "#"
    #(必填)pairRDD重新分区的个数, 一般为cpu核数
    pairRDD-repartition-num = 0
    #(必填)普通RDD重新分区的个数, 视情况而定, 一般为cpu核数
    RDD-repartition-num = 6
    #(必填)是否将清洗后数据保存到上面的保存目录
    save-result-to-file = true
    checkpoint-num = 200
    checkpoint-dir = "hdfs://ns1/p/bw/bi/rms/spark_checkpoint"
    using-prevStepRDD=false
    test-open = true
    test-segbkdailysum-dir = "hdfs://ns1/p/bw/bi/rms/seg_bk_daily_sum/dt=20160511"
    hist-start="2014-01-01"
    #当test-open=true时, 作为历史数据的结束日期
    hist-end="2015-12-31"
    #当test-open=false时, 作为计算历史数据开始日期的天数
    default-hist-days = 960
    #用提前几列的数据预测
    m = 3
    #当某个tag某预测列的历史数据不满足要求时,使用的w权重
    # the count of w should be m + 1
    singular-w = "0.4#0.3#0.3#0"
    #options ["weekday","weekendOrNot","noWeekday"]
    season-weekday-tag-type = "weekday"
    #1:Mon, 2:Tue, 3:Wed, 4:Thu, 5:Fri, 6:Sat, 7:Sun
    weekend-days = [5,6,7]
    fc-days = 31
    matrix-columns = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,22,29,36,43,57,71,85,119,147,175,203,231,259,287,315,343,365]
    #true or false
    fault-tolerance = true
    print-w = true
  },
  {
    #(必填)assembly的唯一名称, 标识该参数列表属于哪个assembly
    name = "micro-pred-fix-shortterm"
    #以下就为具体的参数
    #(必填)数据源所在目录
    hadoop-host= "hdfs://ns1"
    #(必填)数据源所在目录
    combine-result-dir = "hdfs://ns1/p/bw/bi/rms/middata/history/pred_sf_pu/dt=history"
    inventory-dir = "hdfs://ns1/p/bw/bi/rms/rms_inventory/dt=20160511"
    segpredconf-dir = "hdfs://ns1/p/bw/bi/rms/conf/history/predconf/"
    hotel-dir = "hdfs://ns1/p/bw/bi/rms/conf/history/htlcd"
    #(必填)处理后数据保存目录
    dist-dir = "hdfs://ns1/p/bw/bi/rms/middata/history/fix_pred_sf_pu/dt=history"
    #(必填)清洗开始日期
    #default is "now"
    fc-date = "2016-01-02,2016-01-31"
    common-htlcd = "BW00000001"
    #default is "all"
    fc-htlcd = "all"
    field-splitter = "#"
    #(必填)pairRDD重新分区的个数, 一般为cpu核数
    pairRDD-repartition-num = 0
    #(必填)普通RDD重新分区的个数, 视情况而定, 一般为cpu核数
    RDD-repartition-num = 6
    #(必填)是否将清洗后数据保存到上面的保存目录
    save-result-to-file = true
    using-prevStepRDD=false
    test-open=true
    using-htltotal=false
    fc-days = 31
    matrix-columns = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,22,29,36,43,57,71,85,119,147,175,203,231,259,287,315,343,365]
  },
  {
    name = "micro-pred-wsfweight"
    seg_bk_daily_sum_input_path = "hdfs://ns1/p/bw/bi/rms/seg_bk_daily_sum/"
    pred_longterm_sum_input_path= "hdfs://ns1/p/bw/bi/rms/middata/history/pred_lf_sum/dt=history"
    pred_shortterm_sum_input_path = "hdfs://ns1/p/bw/bi/rms/middata/history/pred_sf_sum/dt=history"
    pred_shortterm_mw_input_path = "hdfs://ns1/p/bw/bi/rms/conf/history/pred_st_nw/"
    exclude_liveDt = ""
    include_hotel = "all"
    field_seporator = "#"
    wsf_output_path = "hdfs://ns1/p/bw/bi/rms/conf/history/pred_wsf"
    conf_output_path  = "hdfs://ns1/p/bw/bi/rms/conf/history/predconf/"
    pairRDD-repartition-num = -1
    RDD-repartition-num = 1
    save-result-to-file = "true"
    hdfsHost = "hdfs://ns1"
    fc_date="2013-02-14"
    default-fc-days = 365
    testDailyInputPath="hdfs://ns1/p/bw/bi/rms/seg_bk_daily_sum/dt=20160511"
    testLongInputPath = "hdfs://ns1/p/bw/bi/rms/middata/history/pred_lf_sum/dt=history"
    testShortInputPath ="hdfs://ns1/p/bw/bi/rms/middata/history/pred_sf_sum/dt=history"
    test-open = true
    adv-fc-days = 14
    start_dt = "2015-01-01"
    end_dt = "2015-12-31"
    fc-htlcd = "all"
    is_pred_input_path = ""
    hotel-dir = "hdfs://ns1/p/bw/bi/rms/conf/history/htlcd/"
    common-htlcd = "BW00000001"
  },
  {
    #(必填)assembly的唯一名称, 标识该参数列表属于哪个assembly
    name = "micro-pred-combine"
    #以下就为具体的参数
    #(必填)数据源所在目录
    hadoop-host= "hdfs://ns1"
    #(必填)数据源所在目录
    longterm-result-dir = "hdfs://ns1/p/bw/bi/rms/middata/history/pred_lf_pu/dt=history"
    shortterm-result-dir = "hdfs://ns1/p/bw/bi/rms/middata/history/fix_pred_sf_pu/dt=history"
    holidays-dir = "hdfs://ns1/p/bw/bi/rms/conf/history/specialday/"
    hotel-dir = "hdfs://ns1/p/bw/bi/rms/conf/history/htlcd/"
    season-dir = "hdfs://ns1/p/bw/bi/rms/conf/history/season/"
    segpredconf-dir = "hdfs://ns1/p/bw/bi/rms/conf/history/predconf/"
    #(必填)处理后数据保存目录
    dist-dir = "hdfs://ns1/p/bw/bi/rms/middata/history/pred_wsf_pu/dt=history"
    #(必填)清洗开始日期
    #default is "now"
    fc-date = "2016-01-02,2016-01-31"
    #必须为365的倍数
    common-htlcd = "BW00000001"
    #default is "all"
    fc-htlcd = "all"
    field-splitter = "#"
    #(必填)pairRDD重新分区的个数, 一般为cpu核数
    pairRDD-repartition-num = 6
    #(必填)普通RDD重新分区的个数, 视情况而定, 一般为cpu核数
    RDD-repartition-num = 6
    #(必填)是否将清洗后数据保存到上面的保存目录
    save-result-to-file = true
    using-prevStepRDD=false
    test-open = true
    # options ["weekday","weekendOrNot","noWeekday"]
    season-weekday-tag-type = "weekday"
    #1:Mon, 2:Tue, 3:Wed, 4:Thu, 5:Fri, 6:Sat, 7:Sun
    weekend-days = [5,6,7]
    fc-days = 31
    matrix-columns = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,22,29,36,43,57,71,85,119,147,175,203,231,259,287,315,343,365]
  },
  {
    #(必填)assembly的唯一名称, 标识该参数列表属于哪个assembly
    name = "micro-pred-fix"
    #以下就为具体的参数
    #(必填)数据源所在目录
    hadoop-host= "hdfs://ns1"
    #(必填)数据源所在目录
    combine-result-dir = "hdfs://ns1/p/bw/bi/rms/middata/history/pred_wsf_pu/dt=history"
    inventory-dir = "hdfs://ns1/p/bw/bi/rms/rms_inventory/dt=20160511"
    segpredconf-dir = "hdfs://ns1/p/bw/bi/rms/conf/history/predconf/"
    hotel-dir = "hdfs://ns1/p/bw/bi/rms/conf/history/htlcd/"
    #(必填)处理后数据保存目录
    dist-dir = "hdfs://ns1/p/bw/bi/rms/middata/history/fix_pred_wsf_pu/dt=history"
    #(必填)清洗开始日期
    #default is "now"
    fc-date = "2016-01-02,2016-01-31"
    default-fc-days = 31
    common-htlcd = "BW00000001"
    #default is "all"
    fc-htlcd = "all"
    field-splitter = "#"
    #(必填)pairRDD重新分区的个数, 一般为cpu核数
    pairRDD-repartition-num = 0
    #(必填)普通RDD重新分区的个数, 视情况而定, 一般为cpu核数
    RDD-repartition-num = 6
    #(必填)是否将清洗后数据保存到上面的保存目录
    save-result-to-file = true
    using-prevStepRDD=false
    test-open=true
    using-htltotal=false
    fc-days = 31
    matrix-columns = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,22,29,36,43,57,71,85,119,147,175,203,231,259,287,315,343,365]
  },
  {
    name = "micro-pred-sum"
    matrix_input_path = "hdfs://ns1/p/bw/bi/rms/middata/history/fix_pred_wsf_pu/dt=history"
    fc_price_input_path = "hdfs://ns1/p/bw/bi/rms/pred_avg_price"
    field_seporator = "#"
    inventory_input_path = "hdfs://ns1/p/bw/bi/rms/rms_inventory/"
    output_path = "hdfs://ns1/p/bw/bi/rms/middata/history/pred_wsf_sum/dt=history"
    pairRDD-repartition-num = "-1"
    RDD-repartition-num = "6"
    save-result-to-file = true
    hdfsHost = "hdfs://ns1"
    fc_date = "2016-01-02,2016-01-31"
    test-open = true
    test_fc_price_input_path = "hdfs://ns1/p/bw/bi/rms/pred_avg_price/dt=20160511"
    matrix-columns = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,22,29,36,43,57,71,85,119,147,175,203,231,259,287,315,343,365]
  },
  {
    name = "micro-pred-sum-longterm"
    matrix_input_path = "hdfs://ns1/p/bw/bi/rms/middata/history/pred_lf_pu/dt=history"
    fc_price_input_path = "hdfs://ns1/p/bw/bi/rms/pred_avg_price"
    field_seporator = "#"
    inventory_input_path = "hdfs://ns1/p/bw/bi/rms/rms_inventory/"
    output_path = "hdfs://ns1/p/bw/bi/rms/middata/history/pred_lf_sum/dt=history"
    pairRDD-repartition-num = "-1"
    RDD-repartition-num = "6"
    save-result-to-file = true
    hdfsHost = "hdfs://ns1"
    fc_date = "2016-01-02,2016-01-31"
    test-open = true
    test_fc_price_input_path = "hdfs://ns1/p/bw/bi/rms/pred_avg_price/dt=20160511"
    matrix-columns = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,22,29,36,43,57,71,85,119,147,175,203,231,259,287,315,343,365]
  },
  {
    name = "micro-pred-sum-shortterm"
    matrix_input_path = "hdfs://ns1/p/bw/bi/rms/middata/history/fix_pred_sf_pu/dt=history"
    fc_price_input_path = "hdfs://ns1/p/bw/bi/rms/pred_avg_price"
    field_seporator = "#"
    output_path = "hdfs://ns1/p/bw/bi/rms/middata/history/pred_sf_sum/dt=history"
    pairRDD-repartition-num = "-1"
    RDD-repartition-num = "6"
    save-result-to-file = true
    hdfsHost = "hdfs://ns1"
    fc_date = "2016-01-02,2016-01-31"
    test-open = true
    test_fc_price_input_path = "hdfs://ns1/p/bw/bi/rms/pred_avg_price/dt=20160511"
    matrix-columns = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,22,29,36,43,57,71,85,119,147,175,203,231,259,287,315,343,365]
  }
]